headers.linux = \
stdlib.h                \
stdio.h                 \
string.h                \
pthread.h               \
signal.h                \
stdatomic.h             \
ctype.h                 \
fcntl.h                 \
unistd.h                \
errno.h                 \
liburing.h              \
ur_syscall.h            \
linux/fs.h              \
linux/io_uring.h        \
netinet/in.h            \
sys/ioctl.h             \
sys/mman.h              \
sys/resource.h          \
sys/stat.h              \
sys/syscall.h           \
sys/types.h             \
sys/uio.h               \
sys/wait.h
#ac.h
#headerFilter = liburing/* sys/*
compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu -Isrc/nativeInterop/cinterop/
linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -L/usr/lib -luring
---

#define CATQUEUE_DEPTH 256
#define BLOCK_SZ    1024

struct file_info {
    off_t file_sz;
    struct iovec iovecs[];      /* Referred by readv/writev */
};

//  struct p_t{
//      int triggered  ;
//       int fd[2];
//  };
//  static int NFILES = 5000;
//  static struct p_t *p ;

/* This is x86 specific
#define read_barrier()  __asm__ __volatile__("":::"memory")
#define write_barrier() __asm__ __volatile__("":::"memory") */

static inline void  read_barrier() { __asm__ __volatile__("" ::: "memory") ;}
static inline void  write_barrier() { __asm__ __volatile__("" ::: "memory"); }

enum t_setup_ret {
	T_SETUP_OK	= 0,
	T_SETUP_SKIP,
};




#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
static inline void io_uring_prep_writevFail(struct io_uring_sqe *sqe, int fd,
					const struct iovec *iovecs,
					unsigned nr_vecs, __u64 offset)
{
	io_uring_prep_rw(IORING_OP_WRITEV, sqe, fd, NULL, nr_vecs, offset);
}


typedef struct cqe_parms{
    struct io_uring *ring;
    unsigned int head;
    struct io_uring_cqe *cqe;
    int64_t result;
} ;
static inline void io_uring_do_for_each_cqe(struct cqe_parms * cqep,          vfunc(struct   cqe_parms*))  {
    struct io_uring *ring = cqep->ring;
    struct io_uring_cqe *cqe = cqep->cqe;
    unsigned int head = cqep->head;
    io_uring_for_each_cqe(ring, head, cqe) { \
    struct  cqe_parms a={};\
       a.ring=ring;\
       a.head=head;\
       a.cqe=cqe;\
       int x=  vfunc(&a);
       if(x) break;
     }
};

